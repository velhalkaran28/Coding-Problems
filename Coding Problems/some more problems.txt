package main

import "fmt"

Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.
		1
	2		3
4 5

Input: root = [1,2,3,4,5]
Output: 3
3 is the length of the path [4,2,1,3] or [5,2,1,3].

// ---------------------------
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer.
More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container.
If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.
// 1 , 2, 9
// 2 , 1 , 9
// Input: nums = [1,2,3]
// Output: [1,3,2]

// Input: nums = [3,2,1]
// Output: [1,2,3]

// Input: nums = [1,1,5]
// Output: [1,5,1]

type node struct {
	data int
	left *node
	right *node
}

func findDiamater (root node) {
	count := 0
	ptr := root
	for ptr.left != nil {
		count++
		ptr = *ptr.left
	}
}

func findPermutations([]int) {

}
func main() {
	ip := []int {1,2,3} // 1,2,4,5 = 1,2,5,4 

}
